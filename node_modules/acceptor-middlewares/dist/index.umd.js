(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('babel-runtime/core-js/number/is-integer'), require('babel-runtime/regenerator'), require('babel-runtime/helpers/extends'), require('babel-runtime/helpers/asyncToGenerator'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('mongodb'), require('nagu-validates'), require('jkef-model'), require('debug'), require('babel-runtime/helpers/toConsumableArray'), require('memory-cache')) :
  typeof define === 'function' && define.amd ? define(['exports', 'babel-runtime/core-js/number/is-integer', 'babel-runtime/regenerator', 'babel-runtime/helpers/extends', 'babel-runtime/helpers/asyncToGenerator', 'babel-runtime/helpers/classCallCheck', 'babel-runtime/helpers/createClass', 'mongodb', 'nagu-validates', 'jkef-model', 'debug', 'babel-runtime/helpers/toConsumableArray', 'memory-cache'], factory) :
  (factory((global.acceptor-middlewares = global.acceptor-middlewares || {}),global._Number$isInteger,global._regeneratorRuntime,global._extends,global._asyncToGenerator,global._classCallCheck,global._createClass,global.mongodb,global.naguValidates,global.AcceptorManager,global.debug,global._toConsumableArray,global.cache));
}(this, (function (exports,_Number$isInteger,_regeneratorRuntime,_extends,_asyncToGenerator,_classCallCheck,_createClass,mongodb,naguValidates,AcceptorManager,debug,_toConsumableArray,cache) { 'use strict';

_Number$isInteger = 'default' in _Number$isInteger ? _Number$isInteger['default'] : _Number$isInteger;
_regeneratorRuntime = 'default' in _regeneratorRuntime ? _regeneratorRuntime['default'] : _regeneratorRuntime;
_extends = 'default' in _extends ? _extends['default'] : _extends;
_asyncToGenerator = 'default' in _asyncToGenerator ? _asyncToGenerator['default'] : _asyncToGenerator;
_classCallCheck = 'default' in _classCallCheck ? _classCallCheck['default'] : _classCallCheck;
_createClass = 'default' in _createClass ? _createClass['default'] : _createClass;
AcceptorManager = 'default' in AcceptorManager ? AcceptorManager['default'] : AcceptorManager;
debug = 'default' in debug ? debug['default'] : debug;
_toConsumableArray = 'default' in _toConsumableArray ? _toConsumableArray['default'] : _toConsumableArray;
cache = 'default' in cache ? cache['default'] : cache;

var error = debug('acceptor-middlewares:error');
var info = debug('acceptor-middlewares:info');

/*
eslint-disable no-underscore-dangle, import/no-unresolved, import/extensions
 */

var AcceptorMiddlewares$1 = function () {
  function AcceptorMiddlewares(mongoUrl) {
    var acceptorCollection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'acceptors';

    _classCallCheck(this, AcceptorMiddlewares);

    this.mongoUrl = mongoUrl;
    this.collectionName = acceptorCollection;
    this.acceptorManager = new AcceptorManager(mongoUrl, acceptorCollection);
  }

  // 插入数据的中间件


  _createClass(AcceptorMiddlewares, [{
    key: 'insert',
    value: function insert() {
      var getData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (req) {
        return req.body;
      };

      var _this = this;

      var success = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (data, req, res, next) {
        return next();
      };
      var fail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (e, req, res) {
        return res.send(e);
      };

      return function () {
        var _ref = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(req, res, next) {
          var acceptor, insertedId;
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.prev = 0;
                  acceptor = getData(req, res);
                  // 姓名、证件信息均不能为空

                  if (!(!acceptor || !acceptor.name || !acceptor.idCard || !acceptor.idCard.number)) {
                    _context.next = 5;
                    break;
                  }

                  fail({ ret: naguValidates.OBJECT_IS_UNDEFINED_OR_NULL, msg: '姓名、证件信息均不能为空' }, req, res, next);
                  return _context.abrupt('return');

                case 5:
                  _context.next = 7;
                  return _this.acceptorManager.insert(acceptor);

                case 7:
                  insertedId = _context.sent;

                  // 2 返回结果
                  success(_extends({}, acceptor, {
                    _id: acceptor._id || insertedId
                  }), req, res, next);
                  _context.next = 14;
                  break;

                case 11:
                  _context.prev = 11;
                  _context.t0 = _context['catch'](0);

                  fail({ ret: naguValidates.SERVER_FAILED, msg: _context.t0 }, req, res, next);

                case 14:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, _this, [[0, 11]]);
        }));

        return function (_x5, _x6, _x7) {
          return _ref.apply(this, arguments);
        };
      }();
    }

    // 根据IdCard.Number查找acceptor

  }, {
    key: 'findOneByIdCardNumber',
    value: function findOneByIdCardNumber() {
      var getIdCardNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};

      var _this2 = this;

      var success = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (acceptor, req, res, next) {
        return next();
      };
      var fail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (err, req, res) {
        return res.send(err);
      };

      return function () {
        var _ref2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(req, res, next) {
          var number, doc;
          return _regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.prev = 0;
                  number = getIdCardNumber(req, res);

                  if (number) {
                    _context2.next = 5;
                    break;
                  }

                  fail({ ret: naguValidates.OBJECT_IS_UNDEFINED_OR_NULL, msg: '必须指定idcard.number' }, req, res, next);
                  return _context2.abrupt('return');

                case 5:
                  _context2.next = 7;
                  return _this2.acceptorManager.findOneByIdCardNumber(number);

                case 7:
                  doc = _context2.sent;

                  success(doc, req, res, next);
                  _context2.next = 14;
                  break;

                case 11:
                  _context2.prev = 11;
                  _context2.t0 = _context2['catch'](0);

                  fail({ ret: naguValidates.SERVER_FAILED, msg: _context2.t0 }, req, res, next);

                case 14:
                case 'end':
                  return _context2.stop();
              }
            }
          }, _callee2, _this2, [[0, 11]]);
        }));

        return function (_x11, _x12, _x13) {
          return _ref2.apply(this, arguments);
        };
      }();
    }

    // 通过Id获取数据的中间件

  }, {
    key: 'getById',
    value: function getById() {
      var getId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {
        return null;
      };

      var _this3 = this;

      var success = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (data, req, res) {
        return res.send({ ret: naguValidates.SUCCESS, data: data });
      };
      var fail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (e, req, res) {
        return res.send(e);
      };

      return function () {
        var _ref3 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(req, res, next) {
          var id, data;
          return _regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.prev = 0;
                  id = getId(req, res);

                  if (id) {
                    _context3.next = 5;
                    break;
                  }

                  fail({ ret: naguValidates.OBJECT_IS_UNDEFINED_OR_NULL, msg: '必须提供id' }, req, res, next);
                  return _context3.abrupt('return');

                case 5:
                  _context3.next = 7;
                  return _this3.acceptorManager.findById(id);

                case 7:
                  data = _context3.sent;

                  if (data) {
                    _context3.next = 11;
                    break;
                  }

                  fail({ ret: naguValidates.OBJECT_IS_NOT_FOUND, msg: '对象不存在' }, req, res, next);
                  return _context3.abrupt('return');

                case 11:
                  success(data, req, res, next);
                  _context3.next = 17;
                  break;

                case 14:
                  _context3.prev = 14;
                  _context3.t0 = _context3['catch'](0);

                  fail({
                    ret: naguValidates.SERVER_FAILED,
                    msg: _context3.t0
                  }, req, res, next);

                case 17:
                case 'end':
                  return _context3.stop();
              }
            }
          }, _callee3, _this3, [[0, 14]]);
        }));

        return function (_x17, _x18, _x19) {
          return _ref3.apply(this, arguments);
        };
      }();
    }
  }, {
    key: 'listByRecord',
    value: function listByRecord() {
      var getParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {
        return null;
      };

      var _this4 = this;

      var success = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (data, req, res, next) {
        return next();
      };
      var fail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (e, req, res) {
        return res.send(e);
      };

      return function () {
        var _ref4 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee4(req, res, next) {
          var params, pageIndex, pageSize, limit, skip, data;
          return _regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.prev = 0;
                  params = getParams(req, res);

                  if (params) {
                    _context4.next = 5;
                    break;
                  }

                  fail({ ret: naguValidates.OBJECT_IS_UNDEFINED_OR_NULL, msg: '查询参数必须指定' }, req, res, next);
                  return _context4.abrupt('return');

                case 5:
                  pageIndex = params.pageIndex, pageSize = params.pageSize;

                  if (!pageIndex) {
                    _context4.next = 12;
                    break;
                  }

                  if (!(!_Number$isInteger(pageIndex) || pageIndex < 0)) {
                    _context4.next = 10;
                    break;
                  }

                  fail({ ret: naguValidates.INVALID_INTEGER, msg: 'pageIndex必须是0以上的整数' }, req, res, next);
                  return _context4.abrupt('return');

                case 10:
                  _context4.next = 13;
                  break;

                case 12:
                  pageIndex = 0;

                case 13:
                  if (!pageSize) {
                    _context4.next = 19;
                    break;
                  }

                  if (!(!_Number$isInteger(pageSize) || pageSize < 0)) {
                    _context4.next = 17;
                    break;
                  }

                  fail({ ret: naguValidates.INVALID_INTEGER, msg: 'pageSize必须是0以上的整数' }, req, res, next);
                  return _context4.abrupt('return');

                case 17:
                  _context4.next = 20;
                  break;

                case 19:
                  pageSize = 100;

                case 20:
                  limit = pageSize;
                  skip = pageSize * pageIndex;
                  _context4.next = 24;
                  return _this4.acceptorManager.listByRecord(_extends({}, params, {
                    limit: limit,
                    skip: skip
                  }));

                case 24:
                  data = _context4.sent;

                  success(data, req, res, next);
                  _context4.next = 31;
                  break;

                case 28:
                  _context4.prev = 28;
                  _context4.t0 = _context4['catch'](0);

                  fail({ ret: naguValidates.SERVER_FAILED, msg: _context4.t0 }, req, res, next);

                case 31:
                case 'end':
                  return _context4.stop();
              }
            }
          }, _callee4, _this4, [[0, 28]]);
        }));

        return function (_x23, _x24, _x25) {
          return _ref4.apply(this, arguments);
        };
      }();
    }
  }, {
    key: 'updateById',
    value: function updateById() {
      var getId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {
        return null;
      };
      var getNewData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {
        return null;
      };

      var _this5 = this;

      var success = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (data, req, res, next) {
        return next();
      };
      var fail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (e, req, res) {
        return res.send(e);
      };

      return function () {
        var _ref5 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee5(req, res, next) {
          var _id, newData, result;

          return _regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.prev = 0;
                  _id = getId(req, res);

                  if (_id) {
                    _context5.next = 5;
                    break;
                  }

                  fail({ ret: naguValidates.OBJECT_IS_UNDEFINED_OR_NULL, msg: 'id不能为空' }, req, res, next);
                  return _context5.abrupt('return');

                case 5:
                  newData = getNewData(req, res);

                  if (newData) {
                    _context5.next = 9;
                    break;
                  }

                  fail({ ret: naguValidates.OBJECT_IS_UNDEFINED_OR_NULL, msg: '新数据不能为空' }, req, res, next);
                  return _context5.abrupt('return');

                case 9:
                  _context5.next = 11;
                  return _this5.acceptorManager.updateById(_extends({}, newData, { _id: _id }));

                case 11:
                  result = _context5.sent;

                  success(result, req, res, next);
                  _context5.next = 18;
                  break;

                case 15:
                  _context5.prev = 15;
                  _context5.t0 = _context5['catch'](0);

                  fail({ ret: naguValidates.SERVER_FAILED, msg: _context5.t0 }, req, res, next);

                case 18:
                case 'end':
                  return _context5.stop();
              }
            }
          }, _callee5, _this5, [[0, 15]]);
        }));

        return function (_x30, _x31, _x32) {
          return _ref5.apply(this, arguments);
        };
      }();
    }

    // 添加教育经历

  }, {
    key: 'addEdu',
    value: function addEdu() {
      var getId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {
        return null;
      };
      var getEdu = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (req) {
        return req.body;
      };

      var _this6 = this;

      var success = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (data, req, res, next) {
        return next();
      };
      var fail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (e, req, res) {
        return res.send(e);
      };

      return function () {
        var _ref6 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee6(req, res, next) {
          var id, edu, result;
          return _regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.prev = 0;
                  id = getId(req, res);

                  if (id) {
                    _context6.next = 5;
                    break;
                  }

                  fail({ ret: naguValidates.OBJECT_IS_UNDEFINED_OR_NULL, msg: 'id不能为空' }, req, res, next);
                  return _context6.abrupt('return');

                case 5:
                  edu = getEdu(req, res);

                  if (!(!edu || !edu.name || !edu.degree || !edu.year || !_Number$isInteger(edu.year))) {
                    _context6.next = 9;
                    break;
                  }

                  fail({
                    ret: naguValidates.OBJECT_IS_UNDEFINED_OR_NULL,
                    msg: '必须提供学校名称、层次和入学年份，入学年份必须是数字'
                  }, req, res, next);
                  return _context6.abrupt('return');

                case 9:
                  _context6.next = 11;
                  return _this6.acceptorManager.addEdu(id, edu);

                case 11:
                  result = _context6.sent;

                  success(result, req, res, next);
                  _context6.next = 18;
                  break;

                case 15:
                  _context6.prev = 15;
                  _context6.t0 = _context6['catch'](0);

                  fail({ ret: naguValidates.SERVER_FAILED, msg: _context6.t0 }, req, res, next);

                case 18:
                case 'end':
                  return _context6.stop();
              }
            }
          }, _callee6, _this6, [[0, 15]]);
        }));

        return function (_x37, _x38, _x39) {
          return _ref6.apply(this, arguments);
        };
      }();
    }

    // 添加教育经历

  }, {
    key: 'removeEdu',
    value: function removeEdu() {
      var getId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {
        return null;
      };
      var getEdu = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (req) {
        return req.body;
      };

      var _this7 = this;

      var success = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (data, req, res, next) {
        return next();
      };
      var fail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (e, req, res) {
        return res.send(e);
      };

      return function () {
        var _ref7 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee7(req, res, next) {
          var id, edu, result;
          return _regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _context7.prev = 0;
                  id = getId(req, res);

                  if (id) {
                    _context7.next = 5;
                    break;
                  }

                  fail({ ret: naguValidates.OBJECT_IS_UNDEFINED_OR_NULL, msg: 'id不能为空' }, req, res, next);
                  return _context7.abrupt('return');

                case 5:
                  edu = getEdu(req, res);

                  if (!(!edu || !edu.name || !edu.year || !_Number$isInteger(edu.year))) {
                    _context7.next = 9;
                    break;
                  }

                  fail({
                    ret: naguValidates.OBJECT_IS_UNDEFINED_OR_NULL,
                    msg: '必须提供学校名称和入学年份，入学年份必须是数字'
                  }, req, res, next);
                  return _context7.abrupt('return');

                case 9:
                  _context7.next = 11;
                  return _this7.acceptorManager.removeEdu(id, edu);

                case 11:
                  result = _context7.sent;

                  success(result, req, res, next);
                  _context7.next = 18;
                  break;

                case 15:
                  _context7.prev = 15;
                  _context7.t0 = _context7['catch'](0);

                  fail({ ret: naguValidates.SERVER_FAILED, msg: _context7.t0 }, req, res, next);

                case 18:
                case 'end':
                  return _context7.stop();
              }
            }
          }, _callee7, _this7, [[0, 15]]);
        }));

        return function (_x44, _x45, _x46) {
          return _ref7.apply(this, arguments);
        };
      }();
    }

    // 添加工作经历

  }, {
    key: 'addCareer',
    value: function addCareer() {
      var getId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {
        return null;
      };
      var getCareer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (req) {
        return req.body;
      };

      var _this8 = this;

      var success = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (data, req, res, next) {
        return next();
      };
      var fail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (e, req, res) {
        return res.send(e);
      };

      return function () {
        var _ref8 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee8(req, res, next) {
          var id, career, result;
          return _regeneratorRuntime.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  _context8.prev = 0;
                  id = getId(req, res);

                  if (id) {
                    _context8.next = 5;
                    break;
                  }

                  fail({ ret: naguValidates.OBJECT_IS_UNDEFINED_OR_NULL, msg: 'id不能为空' }, req, res, next);
                  return _context8.abrupt('return');

                case 5:
                  career = getCareer(req, res);

                  if (!(!career || !career.name || !career.year || !_Number$isInteger(career.year))) {
                    _context8.next = 9;
                    break;
                  }

                  fail({
                    ret: naguValidates.OBJECT_IS_UNDEFINED_OR_NULL,
                    msg: '必须提供公司名称和入职年份，入职年份必须是数字'
                  }, req, res, next);
                  return _context8.abrupt('return');

                case 9:
                  _context8.next = 11;
                  return _this8.acceptorManager.addCareer(id, career);

                case 11:
                  result = _context8.sent;

                  success(result, req, res, next);
                  _context8.next = 18;
                  break;

                case 15:
                  _context8.prev = 15;
                  _context8.t0 = _context8['catch'](0);

                  fail({ ret: naguValidates.SERVER_FAILED, msg: _context8.t0 }, req, res, next);

                case 18:
                case 'end':
                  return _context8.stop();
              }
            }
          }, _callee8, _this8, [[0, 15]]);
        }));

        return function (_x51, _x52, _x53) {
          return _ref8.apply(this, arguments);
        };
      }();
    }

    // 删除工作经历

  }, {
    key: 'removeCareer',
    value: function removeCareer() {
      var getId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {
        return null;
      };
      var getCareer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (req) {
        return req.body;
      };

      var _this9 = this;

      var success = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (data, req, res, next) {
        return next();
      };
      var fail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (e, req, res) {
        return res.send(e);
      };

      return function () {
        var _ref9 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee9(req, res, next) {
          var id, career, result;
          return _regeneratorRuntime.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  _context9.prev = 0;
                  id = getId(req, res);

                  if (id) {
                    _context9.next = 5;
                    break;
                  }

                  fail({ ret: naguValidates.OBJECT_IS_UNDEFINED_OR_NULL, msg: 'id不能为空' }, req, res, next);
                  return _context9.abrupt('return');

                case 5:
                  career = getCareer(req, res);

                  if (!(!career || !career.name || !career.year || !_Number$isInteger(career.year))) {
                    _context9.next = 9;
                    break;
                  }

                  fail({
                    ret: naguValidates.OBJECT_IS_UNDEFINED_OR_NULL,
                    msg: '必须提供学校名称和入学年份，入学年份必须是数字'
                  }, req, res, next);
                  return _context9.abrupt('return');

                case 9:
                  _context9.next = 11;
                  return _this9.acceptorManager.removeCareer(id, career);

                case 11:
                  result = _context9.sent;

                  success(result, req, res, next);
                  _context9.next = 18;
                  break;

                case 15:
                  _context9.prev = 15;
                  _context9.t0 = _context9['catch'](0);

                  fail({ ret: naguValidates.SERVER_FAILED, msg: _context9.t0 }, req, res, next);

                case 18:
                case 'end':
                  return _context9.stop();
              }
            }
          }, _callee9, _this9, [[0, 15]]);
        }));

        return function (_x58, _x59, _x60) {
          return _ref9.apply(this, arguments);
        };
      }();
    }

    // 添加奖助记录

  }, {
    key: 'addRecord',
    value: function addRecord() {
      var getId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {
        return null;
      };
      var getRecord = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (req) {
        return req.body;
      };

      var _this10 = this;

      var success = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (data, req, res, next) {
        return next();
      };
      var fail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (e, req, res) {
        return res.send(e);
      };

      return function () {
        var _ref10 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee10(req, res, next) {
          var id, record, recordId;
          return _regeneratorRuntime.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  _context10.prev = 0;
                  id = getId(req, res);

                  if (id) {
                    _context10.next = 5;
                    break;
                  }

                  fail({ ret: naguValidates.OBJECT_IS_UNDEFINED_OR_NULL, msg: 'id不能为空' }, req, res, next);
                  return _context10.abrupt('return');

                case 5:
                  record = getRecord(req, res);

                  if (!(!record || !record.project || !record.amount || !_Number$isInteger(record.amount * 1000) || !record.date || !(record.date instanceof Date))) {
                    _context10.next = 9;
                    break;
                  }

                  fail({
                    ret: naguValidates.OBJECT_IS_UNDEFINED_OR_NULL,
                    msg: '必须提供项目名称和金额，金额必须是数字，日期必须是Date类型'
                  }, req, res, next);
                  return _context10.abrupt('return');

                case 9:
                  _context10.next = 11;
                  return _this10.acceptorManager.addRecord(id, _extends({}, record, {
                    amount: record.amount * 1000,
                    _id: new mongodb.ObjectId()
                  }));

                case 11:
                  recordId = _context10.sent;

                  success(recordId, req, res, next);
                  _context10.next = 18;
                  break;

                case 15:
                  _context10.prev = 15;
                  _context10.t0 = _context10['catch'](0);

                  fail({ ret: naguValidates.SERVER_FAILED, msg: _context10.t0 }, req, res, next);

                case 18:
                case 'end':
                  return _context10.stop();
              }
            }
          }, _callee10, _this10, [[0, 15]]);
        }));

        return function (_x65, _x66, _x67) {
          return _ref10.apply(this, arguments);
        };
      }();
    }
  }, {
    key: 'removeRecord',
    value: function removeRecord() {
      var getId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {
        return null;
      };
      var getRecordId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {
        return null;
      };

      var _this11 = this;

      var success = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (data, req, res, next) {
        return next();
      };
      var fail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (e, req, res) {
        return res.send(e);
      };

      return function () {
        var _ref11 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee11(req, res, next) {
          var id, recordId, result;
          return _regeneratorRuntime.wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  _context11.prev = 0;
                  id = getId(req, res);

                  if (id) {
                    _context11.next = 5;
                    break;
                  }

                  fail({ ret: naguValidates.OBJECT_IS_UNDEFINED_OR_NULL, msg: 'id不能为空' }, req, res, next);
                  return _context11.abrupt('return');

                case 5:
                  recordId = getRecordId(req, res);

                  if (recordId) {
                    _context11.next = 9;
                    break;
                  }

                  fail({ ret: naguValidates.OBJECT_IS_UNDEFINED_OR_NULL, msg: 'recordId不能为空' }, req, res, next);
                  return _context11.abrupt('return');

                case 9:
                  _context11.next = 11;
                  return _this11.acceptorManager.removeRecord(id, recordId);

                case 11:
                  result = _context11.sent;

                  success(result, req, res, next);
                  _context11.next = 18;
                  break;

                case 15:
                  _context11.prev = 15;
                  _context11.t0 = _context11['catch'](0);

                  fail({ ret: naguValidates.SERVER_FAILED, msg: _context11.t0 }, req, res, next);

                case 18:
                case 'end':
                  return _context11.stop();
              }
            }
          }, _callee11, _this11, [[0, 15]]);
        }));

        return function (_x72, _x73, _x74) {
          return _ref11.apply(this, arguments);
        };
      }();
    }
  }, {
    key: 'removeById',
    value: function removeById() {
      var getId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {
        return null;
      };

      var _this12 = this;

      var success = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (data, req, res) {
        return res.send({ ret: naguValidates.SUCCESS, data: data });
      };
      var fail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (e, req, res) {
        return res.send(e);
      };

      return function () {
        var _ref12 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee12(req, res, next) {
          var id, result;
          return _regeneratorRuntime.wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  _context12.prev = 0;
                  id = getId(req, res);

                  if (id) {
                    _context12.next = 5;
                    break;
                  }

                  fail({ ret: naguValidates.OBJECT_IS_UNDEFINED_OR_NULL, msg: '必须提供id' }, req, res, next);
                  return _context12.abrupt('return');

                case 5:
                  _context12.next = 7;
                  return _this12.acceptorManager.removeById(id);

                case 7:
                  result = _context12.sent;

                  success(result, req, res, next);
                  _context12.next = 14;
                  break;

                case 11:
                  _context12.prev = 11;
                  _context12.t0 = _context12['catch'](0);

                  fail({
                    ret: naguValidates.SERVER_FAILED,
                    msg: _context12.t0
                  }, req, res, next);

                case 14:
                case 'end':
                  return _context12.stop();
              }
            }
          }, _callee12, _this12, [[0, 11]]);
        }));

        return function (_x78, _x79, _x80) {
          return _ref12.apply(this, arguments);
        };
      }();
    }
  }]);

  return AcceptorMiddlewares;
}();

var _this = undefined;

var error$1 = debug('memory-cache-proxy:error');
var info$1 = debug('memory-cache-proxy:info');

var cacheProxy = (function () {
  var _ref = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(func, cacheOptions) {
    var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var data;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            info$1(func.name + ' Cache Proxy');
            // 检查cacheOptions是否正确

            if (!(!cacheOptions || !cacheOptions.key || !cacheOptions.expire)) {
              _context.next = 4;
              break;
            }

            error$1('cacheOptions must be provided.');
            throw new Error('cacheOptions must be provided.');

          case 4:
            if (Array.isArray(args)) {
              _context.next = 7;
              break;
            }

            error$1('parameter args must be a array');
            throw new Error('parameter args must be a array');

          case 7:
            _context.prev = 7;
            data = cache.get(cacheOptions.key);

            // 强制刷新或缓存中没有数据，从func获取

            if (!(cacheOptions.forceFlush || !data)) {
              _context.next = 18;
              break;
            }

            info$1(func.name + ' get data from cache failed. cacheKey:', cacheOptions.key);

            _context.next = 13;
            return func.apply(undefined, _toConsumableArray(args));

          case 13:
            data = _context.sent;

            cache.put(cacheOptions.key, data, cacheOptions.expire);
            info$1('putted data to cache. cacheOptions=', cacheOptions);
            _context.next = 19;
            break;

          case 18:
            info$1('retrived data from cache. cacheKey=', cacheOptions.key);

          case 19:
            return _context.abrupt('return', data);

          case 22:
            _context.prev = 22;
            _context.t0 = _context['catch'](7);

            error$1(_context.t0.message);
            error$1(_context.t0.stack);
            throw _context.t0;

          case 27:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, _this, [[7, 22]]);
  }));

  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
})();

/*
eslint-disable import/extensions, import/no-unresolved, no-param-reassign
 */
var StatMiddlewares$1 = function () {
  function StatMiddlewares(mongoUrl) {
    var acceptorCollection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'acceptors';

    _classCallCheck(this, StatMiddlewares);

    this.mongoUrl = mongoUrl;
    this.collectionName = acceptorCollection;
    this.acceptorManager = new AcceptorManager(mongoUrl, acceptorCollection);
  }

  _createClass(StatMiddlewares, [{
    key: 'getStatByProject',
    value: function getStatByProject() {
      var success = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (data, req, res, next) {
        res.stateByProject = data;
        next();
      };

      var _this = this;

      var fail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (e, req, res) {
        return res.send(e);
      };
      var cacheOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        key: 'jkef:acceptors:stat:byproject',
        expire: 10 * 3600 * 1000
      };

      return function () {
        var _ref = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(req, res, next) {
          var data;
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.prev = 0;
                  _context.next = 3;
                  return cacheProxy(_this.acceptorManager.getStatByProject.bind(_this.acceptorManager), cacheOptions);

                case 3:
                  data = _context.sent;

                  success(data, req, res, next);
                  _context.next = 10;
                  break;

                case 7:
                  _context.prev = 7;
                  _context.t0 = _context['catch'](0);

                  fail({ ret: naguValidates.SERVER_FAILED, msg: _context.t0 }, req, res, next);

                case 10:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, _this, [[0, 7]]);
        }));

        return function (_x5, _x6, _x7) {
          return _ref.apply(this, arguments);
        };
      }();
    }
  }, {
    key: 'getStatByYear',
    value: function getStatByYear() {
      var success = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (data, req, res, next) {
        res.stateByYear = data;
        next();
      };

      var _this2 = this;

      var fail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (e, req, res) {
        return res.send(e);
      };
      var cacheOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        key: 'jkef:acceptors:stat:byyear',
        expire: 10 * 3600 * 1000
      };

      return function () {
        var _ref2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(req, res, next) {
          var data;
          return _regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.prev = 0;
                  _context2.next = 3;
                  return cacheProxy(_this2.acceptorManager.getStatByYear.bind(_this2.acceptorManager), cacheOptions);

                case 3:
                  data = _context2.sent;

                  success(data, req, res, next);
                  _context2.next = 10;
                  break;

                case 7:
                  _context2.prev = 7;
                  _context2.t0 = _context2['catch'](0);

                  fail({ ret: naguValidates.SERVER_FAILED, msg: _context2.t0 }, req, res, next);

                case 10:
                case 'end':
                  return _context2.stop();
              }
            }
          }, _callee2, _this2, [[0, 7]]);
        }));

        return function (_x11, _x12, _x13) {
          return _ref2.apply(this, arguments);
        };
      }();
    }
  }]);

  return StatMiddlewares;
}();

var StatMiddlewares = StatMiddlewares$1;
var AcceptorMiddlewares = AcceptorMiddlewares$1;

exports.StatMiddlewares = StatMiddlewares;
exports.AcceptorMiddlewares = AcceptorMiddlewares;
exports['default'] = AcceptorMiddlewares$1;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.umd.js.map
